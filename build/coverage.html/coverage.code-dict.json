{"/home/travis/build/npmtest/node-npmtest-sockjs/test.js":"/* istanbul instrument in package npmtest_sockjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sockjs/lib.npmtest_sockjs.js":"/* istanbul instrument in package npmtest_sockjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sockjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sockjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sockjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sockjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sockjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sockjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sockjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_sockjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sockjs.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_sockjs.__dirname +\n                    '/lib.npmtest_sockjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/index.js":"module.exports = require('./lib/sockjs');\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/sockjs.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var App, Listener, Server, chunking_test, events, fs, generate_dispatcher, iframe, sockjsVersion, trans_eventsource, trans_htmlfile, trans_jsonp, trans_websocket, trans_xhr, utils, webjs,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  events = require('events');\n\n  fs = require('fs');\n\n  webjs = require('./webjs');\n\n  utils = require('./utils');\n\n  trans_websocket = require('./trans-websocket');\n\n  trans_jsonp = require('./trans-jsonp');\n\n  trans_xhr = require('./trans-xhr');\n\n  iframe = require('./iframe');\n\n  trans_eventsource = require('./trans-eventsource');\n\n  trans_htmlfile = require('./trans-htmlfile');\n\n  chunking_test = require('./chunking-test');\n\n  sockjsVersion = function() {\n    var pkg, x;\n    try {\n      pkg = fs.readFileSync(__dirname + '/../package.json', 'utf-8');\n    } catch (error) {\n      x = error;\n    }\n    if (pkg) {\n      return JSON.parse(pkg).version;\n    } else {\n      return null;\n    }\n  };\n\n  App = (function(superClass) {\n    extend(App, superClass);\n\n    function App() {\n      return App.__super__.constructor.apply(this, arguments);\n    }\n\n    App.prototype.welcome_screen = function(req, res) {\n      res.setHeader('content-type', 'text/plain; charset=UTF-8');\n      res.writeHead(200);\n      res.end(\"Welcome to SockJS!\\n\");\n      return true;\n    };\n\n    App.prototype.handle_404 = function(req, res) {\n      res.setHeader('content-type', 'text/plain; charset=UTF-8');\n      res.writeHead(404);\n      res.end('404 Error: Page not found\\n');\n      return true;\n    };\n\n    App.prototype.disabled_transport = function(req, res, data) {\n      return this.handle_404(req, res, data);\n    };\n\n    App.prototype.h_sid = function(req, res, data) {\n      var jsid;\n      req.cookies = utils.parseCookie(req.headers.cookie);\n      if (typeof this.options.jsessionid === 'function') {\n        this.options.jsessionid(req, res);\n      } else if (this.options.jsessionid && res.setHeader) {\n        jsid = req.cookies['JSESSIONID'] || 'dummy';\n        res.setHeader('Set-Cookie', 'JSESSIONID=' + jsid + '; path=/');\n      }\n      return data;\n    };\n\n    App.prototype.log = function(severity, line) {\n      return this.options.log(severity, line);\n    };\n\n    return App;\n\n  })(webjs.GenericApp);\n\n  utils.objectExtend(App.prototype, iframe.app);\n\n  utils.objectExtend(App.prototype, chunking_test.app);\n\n  utils.objectExtend(App.prototype, trans_websocket.app);\n\n  utils.objectExtend(App.prototype, trans_jsonp.app);\n\n  utils.objectExtend(App.prototype, trans_xhr.app);\n\n  utils.objectExtend(App.prototype, trans_eventsource.app);\n\n  utils.objectExtend(App.prototype, trans_htmlfile.app);\n\n  generate_dispatcher = function(options) {\n    var opts_filters, p, prefix_dispatcher, t, transport_dispatcher;\n    p = (function(_this) {\n      return function(s) {\n        return new RegExp('^' + options.prefix + s + '[/]?$');\n      };\n    })(this);\n    t = (function(_this) {\n      return function(s) {\n        return [p('/([^/.]+)/([^/.]+)' + s), 'server', 'session'];\n      };\n    })(this);\n    opts_filters = function(options_filter) {\n      if (options_filter == null) {\n        options_filter = 'xhr_options';\n      }\n      return ['h_sid', 'xhr_cors', 'cache_for', options_filter, 'expose'];\n    };\n    prefix_dispatcher = [['GET', p(''), ['welcome_screen']], ['GET', p('/iframe[0-9-.a-z_]*.html'), ['iframe', 'cache_for', 'expose']], ['OPTIONS', p('/info'), opts_filters('info_options')], ['GET', p('/info'), ['xhr_cors', 'h_no_cache', 'info', 'expose']], ['OPTIONS', p('/chunking_test'), opts_filters()], ['POST', p('/chunking_test'), ['xhr_cors', 'expect_xhr', 'chunking_test']]];\n    transport_dispatcher = [['GET', t('/jsonp'), ['h_sid', 'h_no_cache', 'jsonp']], ['POST', t('/jsonp_send'), ['h_sid', 'h_no_cache', 'expect_form', 'jsonp_send']], ['POST', t('/xhr'), ['h_sid', 'h_no_cache', 'xhr_cors', 'xhr_poll']], ['OPTIONS', t('/xhr'), opts_filters()], ['POST', t('/xhr_send'), ['h_sid', 'h_no_cache', 'xhr_cors', 'expect_xhr', 'xhr_send']], ['OPTIONS', t('/xhr_send'), opts_filters()], ['POST', t('/xhr_streaming'), ['h_sid', 'h_no_cache', 'xhr_cors', 'xhr_streaming']], ['OPTIONS', t('/xhr_streaming'), opts_filters()], ['GET', t('/eventsource'), ['h_sid', 'h_no_cache', 'eventsource']], ['GET', t('/htmlfile'), ['h_sid', 'h_no_cache', 'htmlfile']]];\n    if (options.websocket) {\n      prefix_dispatcher.push(['GET', p('/websocket'), ['raw_websocket']]);\n      transport_dispatcher.push(['GET', t('/websocket'), ['sockjs_websocket']]);\n    } else {\n      prefix_dispatcher.push(['GET', p('/websocket'), ['cache_for', 'disabled_transport']]);\n      transport_dispatcher.push(['GET', t('/websocket'), ['cache_for', 'disabled_transport']]);\n    }\n    return prefix_dispatcher.concat(transport_dispatcher);\n  };\n\n  Listener = (function() {\n    function Listener(options1, emit) {\n      this.options = options1;\n      this.handler = bind(this.handler, this);\n      this.app = new App();\n      this.app.options = this.options;\n      this.app.emit = emit;\n      this.app.log('debug', 'SockJS v' + sockjsVersion() + ' ' + 'bound to ' + JSON.stringify(this.options.prefix));\n      this.dispatcher = generate_dispatcher(this.options);\n      this.webjs_handler = webjs.generateHandler(this.app, this.dispatcher);\n      this.path_regexp = new RegExp('^' + this.options.prefix + '([/].+|[/]?)$');\n    }\n\n    Listener.prototype.handler = function(req, res, extra) {\n      if (!req.url.match(this.path_regexp)) {\n        return false;\n      }\n      this.webjs_handler(req, res, extra);\n      return true;\n    };\n\n    Listener.prototype.getHandler = function() {\n      return (function(_this) {\n        return function(a, b, c) {\n          return _this.handler(a, b, c);\n        };\n      })(this);\n    };\n\n    return Listener;\n\n  })();\n\n  Server = (function(superClass) {\n    extend(Server, superClass);\n\n    function Server(user_options) {\n      this.options = {\n        prefix: '',\n        response_limit: 128 * 1024,\n        websocket: true,\n        faye_server_options: null,\n        jsessionid: false,\n        heartbeat_delay: 25000,\n        disconnect_delay: 5000,\n        log: function(severity, line) {\n          return console.log(line);\n        },\n        sockjs_url: 'https://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js'\n      };\n      if (user_options) {\n        utils.objectExtend(this.options, user_options);\n      }\n    }\n\n    Server.prototype.listener = function(handler_options) {\n      var options;\n      options = utils.objectExtend({}, this.options);\n      if (handler_options) {\n        utils.objectExtend(options, handler_options);\n      }\n      return new Listener(options, (function(_this) {\n        return function() {\n          return _this.emit.apply(_this, arguments);\n        };\n      })(this));\n    };\n\n    Server.prototype.installHandlers = function(http_server, handler_options) {\n      var handler;\n      handler = this.listener(handler_options).getHandler();\n      utils.overshadowListeners(http_server, 'request', handler);\n      utils.overshadowListeners(http_server, 'upgrade', handler);\n      return true;\n    };\n\n    Server.prototype.middleware = function(handler_options) {\n      var handler;\n      handler = this.listener(handler_options).getHandler();\n      handler.upgrade = handler;\n      return handler;\n    };\n\n    return Server;\n\n  })(events.EventEmitter);\n\n  exports.createServer = function(options) {\n    return new Server(options);\n  };\n\n  exports.listen = function(http_server, options) {\n    var srv;\n    srv = exports.createServer(options);\n    if (http_server) {\n      srv.installHandlers(http_server);\n    }\n    return srv;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/webjs.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var GenericApp, execute_request, fake_response, fs, http, querystring, url, utils;\n\n  url = require('url');\n\n  querystring = require('querystring');\n\n  fs = require('fs');\n\n  http = require('http');\n\n  utils = require('./utils');\n\n  execute_request = function(app, funs, req, res, data) {\n    var fun, results, x;\n    try {\n      results = [];\n      while (funs.length > 0) {\n        fun = funs.shift();\n        req.last_fun = fun;\n        results.push(data = app[fun](req, res, data, req.next_filter));\n      }\n      return results;\n    } catch (error1) {\n      x = error1;\n      if (typeof x === 'object' && 'status' in x) {\n        if (x.status === 0) {\n          return;\n        } else if ('handle_' + x.status in app) {\n          app['handle_' + x.status](req, res, x);\n        } else {\n          app['handle_error'](req, res, x);\n        }\n      } else {\n        app['handle_error'](req, res, x);\n      }\n      return app['log_request'](req, res, true);\n    }\n  };\n\n  fake_response = function(req, res) {\n    var headers;\n    headers = {\n      'Connection': 'close'\n    };\n    res.writeHead = function(status, user_headers) {\n      var k, r, x;\n      if (user_headers == null) {\n        user_headers = {};\n      }\n      r = [];\n      r.push('HTTP/' + req.httpVersion + ' ' + status + ' ' + http.STATUS_CODES[status]);\n      utils.objectExtend(headers, user_headers);\n      for (k in headers) {\n        r.push(k + ': ' + headers[k]);\n      }\n      r = r.concat(['', '']);\n      try {\n        res.write(r.join('\\r\\n'));\n      } catch (error1) {\n        x = error1;\n      }\n      try {\n        return res.end();\n      } catch (error1) {\n        x = error1;\n      }\n    };\n    return res.setHeader = function(k, v) {\n      return headers[k] = v;\n    };\n  };\n\n  exports.generateHandler = function(app, dispatcher) {\n    return function(req, res, head) {\n      var allowed_methods, found, funs, i, j, l, len, m, method, path, ref, row;\n      if (typeof res.writeHead === \"undefined\") {\n        fake_response(req, res);\n      }\n      utils.objectExtend(req, url.parse(req.url, true));\n      req.start_date = new Date();\n      found = false;\n      allowed_methods = [];\n      for (j = 0, len = dispatcher.length; j < len; j++) {\n        row = dispatcher[j];\n        method = row[0], path = row[1], funs = row[2];\n        if (path.constructor !== Array) {\n          path = [path];\n        }\n        m = req.pathname.match(path[0]);\n        if (!m) {\n          continue;\n        }\n        if (!req.method.match(new RegExp(method))) {\n          allowed_methods.push(method);\n          continue;\n        }\n        for (i = l = 1, ref = path.length; 1 <= ref ? l < ref : l > ref; i = 1 <= ref ? ++l : --l) {\n          req[path[i]] = m[i];\n        }\n        funs = funs.slice(0);\n        funs.push('log_request');\n        req.next_filter = function(data) {\n          return execute_request(app, funs, req, res, data);\n        };\n        req.next_filter(head);\n        found = true;\n        break;\n      }\n      if (!found) {\n        if (allowed_methods.length !== 0) {\n          app['handle_405'](req, res, allowed_methods);\n        } else {\n          app['handle_404'](req, res);\n        }\n        app['log_request'](req, res, true);\n      }\n    };\n  };\n\n  exports.GenericApp = GenericApp = (function() {\n    function GenericApp() {}\n\n    GenericApp.prototype.handle_404 = function(req, res, x) {\n      if (res.finished) {\n        return x;\n      }\n      res.writeHead(404, {});\n      res.end();\n      return true;\n    };\n\n    GenericApp.prototype.handle_405 = function(req, res, methods) {\n      res.writeHead(405, {\n        'Allow': methods.join(', ')\n      });\n      res.end();\n      return true;\n    };\n\n    GenericApp.prototype.handle_error = function(req, res, x) {\n      if (res.finished) {\n        return x;\n      }\n      if (typeof x === 'object' && 'status' in x) {\n        res.writeHead(x.status, {});\n        res.end(x.message || \"\");\n      } else {\n        try {\n          res.writeHead(500, {});\n          res.end(\"500 - Internal Server Error\");\n        } catch (error1) {\n          x = error1;\n        }\n        this.log('error', 'Exception on \"' + req.method + ' ' + req.href + '\" in filter \"' + req.last_fun + '\":\\n' + (x.stack || x));\n      }\n      return true;\n    };\n\n    GenericApp.prototype.log_request = function(req, res, data) {\n      var td;\n      td = (new Date()) - req.start_date;\n      this.log('info', req.method + ' ' + req.url + ' ' + td + 'ms ' + (res.finished ? res.statusCode : '(unfinished)'));\n      return data;\n    };\n\n    GenericApp.prototype.log = function(severity, line) {\n      return console.log(line);\n    };\n\n    GenericApp.prototype.expose_html = function(req, res, content) {\n      if (res.finished) {\n        return content;\n      }\n      if (!res.getHeader('Content-Type')) {\n        res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n      }\n      return this.expose(req, res, content);\n    };\n\n    GenericApp.prototype.expose_json = function(req, res, content) {\n      if (res.finished) {\n        return content;\n      }\n      if (!res.getHeader('Content-Type')) {\n        res.setHeader('Content-Type', 'application/json');\n      }\n      return this.expose(req, res, JSON.stringify(content));\n    };\n\n    GenericApp.prototype.expose = function(req, res, content) {\n      if (res.finished) {\n        return content;\n      }\n      if (content && !res.getHeader('Content-Type')) {\n        res.setHeader('Content-Type', 'text/plain');\n      }\n      if (content) {\n        res.setHeader('Content-Length', content.length);\n      }\n      res.writeHead(res.statusCode);\n      res.end(content, 'utf8');\n      return true;\n    };\n\n    GenericApp.prototype.serve_file = function(req, res, filename, next_filter) {\n      var a;\n      a = function(error, content) {\n        if (error) {\n          res.writeHead(500);\n          res.end(\"can't read file\");\n        } else {\n          res.setHeader('Content-length', content.length);\n          res.writeHead(res.statusCode, res.headers);\n          res.end(content, 'utf8');\n        }\n        return next_filter(true);\n      };\n      fs.readFile(filename, a);\n      throw {\n        status: 0\n      };\n    };\n\n    GenericApp.prototype.cache_for = function(req, res, content) {\n      var exp;\n      res.cache_for = res.cache_for || 365 * 24 * 60 * 60;\n      res.setHeader('Cache-Control', 'public, max-age=' + res.cache_for);\n      exp = new Date();\n      exp.setTime(exp.getTime() + res.cache_for * 1000);\n      res.setHeader('Expires', exp.toGMTString());\n      return content;\n    };\n\n    GenericApp.prototype.h_no_cache = function(req, res, content) {\n      res.setHeader('Cache-Control', 'no-store, no-cache, no-transform, must-revalidate, max-age=0');\n      return content;\n    };\n\n    GenericApp.prototype.expect_form = function(req, res, _data, next_filter) {\n      var data;\n      data = new Buffer(0);\n      req.on('data', (function(_this) {\n        return function(d) {\n          return data = utils.buffer_concat(data, new Buffer(d, 'binary'));\n        };\n      })(this));\n      req.on('end', (function(_this) {\n        return function() {\n          var q;\n          data = data.toString('utf-8');\n          switch ((req.headers['content-type'] || '').split(';')[0]) {\n            case 'application/x-www-form-urlencoded':\n              q = querystring.parse(data);\n              break;\n            case 'text/plain':\n            case '':\n              q = data;\n              break;\n            default:\n              _this.log('error', \"Unsupported content-type \" + req.headers['content-type']);\n              q = void 0;\n          }\n          return next_filter(q);\n        };\n      })(this));\n      throw {\n        status: 0\n      };\n    };\n\n    GenericApp.prototype.expect_xhr = function(req, res, _data, next_filter) {\n      var data;\n      data = new Buffer(0);\n      req.on('data', (function(_this) {\n        return function(d) {\n          return data = utils.buffer_concat(data, new Buffer(d, 'binary'));\n        };\n      })(this));\n      req.on('end', (function(_this) {\n        return function() {\n          var q;\n          data = data.toString('utf-8');\n          switch ((req.headers['content-type'] || '').split(';')[0]) {\n            case 'text/plain':\n            case 'T':\n            case 'application/json':\n            case 'application/xml':\n            case '':\n            case 'text/xml':\n              q = data;\n              break;\n            default:\n              _this.log('error', 'Unsupported content-type ' + req.headers['content-type']);\n              q = void 0;\n          }\n          return next_filter(q);\n        };\n      })(this));\n      throw {\n        status: 0\n      };\n    };\n\n    return GenericApp;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/utils.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var array_intersection, crypto, escapable, lookup, unroll_lookup;\n\n  crypto = require('crypto');\n\n  exports.array_intersection = array_intersection = function(arr_a, arr_b) {\n    var a, j, len, r;\n    r = [];\n    for (j = 0, len = arr_a.length; j < len; j++) {\n      a = arr_a[j];\n      if (arr_b.indexOf(a) !== -1) {\n        r.push(a);\n      }\n    }\n    return r;\n  };\n\n  exports.escape_selected = function(str, chars) {\n    var c, i, j, l, len, map, parts, r, ref, v;\n    map = {};\n    chars = '%' + chars;\n    for (j = 0, len = chars.length; j < len; j++) {\n      c = chars[j];\n      map[c] = escape(c);\n    }\n    r = new RegExp('([' + chars + '])');\n    parts = str.split(r);\n    for (i = l = 0, ref = parts.length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n      v = parts[i];\n      if (v.length === 1 && v in map) {\n        parts[i] = map[v];\n      }\n    }\n    return parts.join('');\n  };\n\n  exports.buffer_concat = function(buf_a, buf_b) {\n    var dst;\n    dst = new Buffer(buf_a.length + buf_b.length);\n    buf_a.copy(dst);\n    buf_b.copy(dst, buf_a.length);\n    return dst;\n  };\n\n  exports.md5_hex = function(data) {\n    return crypto.createHash('md5').update(data).digest('hex');\n  };\n\n  exports.sha1_base64 = function(data) {\n    return crypto.createHash('sha1').update(data).digest('base64');\n  };\n\n  exports.timeout_chain = function(arr) {\n    var fun, ref, timeout, user_fun;\n    arr = arr.slice(0);\n    if (!arr.length) {\n      return;\n    }\n    ref = arr.shift(), timeout = ref[0], user_fun = ref[1];\n    fun = (function(_this) {\n      return function() {\n        user_fun();\n        return exports.timeout_chain(arr);\n      };\n    })(this);\n    return setTimeout(fun, timeout);\n  };\n\n  exports.objectExtend = function(dst, src) {\n    var k;\n    for (k in src) {\n      if (src.hasOwnProperty(k)) {\n        dst[k] = src[k];\n      }\n    }\n    return dst;\n  };\n\n  exports.overshadowListeners = function(ee, event, handler) {\n    var new_handler, old_listeners;\n    old_listeners = ee.listeners(event).slice(0);\n    ee.removeAllListeners(event);\n    new_handler = function() {\n      var j, len, listener;\n      if (handler.apply(this, arguments) !== true) {\n        for (j = 0, len = old_listeners.length; j < len; j++) {\n          listener = old_listeners[j];\n          listener.apply(this, arguments);\n        }\n        return false;\n      }\n      return true;\n    };\n    return ee.addListener(event, new_handler);\n  };\n\n  escapable = /[\\x00-\\x1f\\ud800-\\udfff\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufff0-\\uffff]/g;\n\n  unroll_lookup = function(escapable) {\n    var c, i, unrolled;\n    unrolled = {};\n    c = (function() {\n      var j, results;\n      results = [];\n      for (i = j = 0; j < 65536; i = ++j) {\n        results.push(String.fromCharCode(i));\n      }\n      return results;\n    })();\n    escapable.lastIndex = 0;\n    c.join('').replace(escapable, function(a) {\n      return unrolled[a] = '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    });\n    return unrolled;\n  };\n\n  lookup = unroll_lookup(escapable);\n\n  exports.quote = function(string) {\n    var quoted;\n    quoted = JSON.stringify(string);\n    escapable.lastIndex = 0;\n    if (!escapable.test(quoted)) {\n      return quoted;\n    }\n    return quoted.replace(escapable, function(a) {\n      return lookup[a];\n    });\n  };\n\n  exports.parseCookie = function(cookie_header) {\n    var cookie, cookies, j, len, parts, ref;\n    cookies = {};\n    if (cookie_header) {\n      ref = cookie_header.split(';');\n      for (j = 0, len = ref.length; j < len; j++) {\n        cookie = ref[j];\n        parts = cookie.split('=');\n        cookies[parts[0].trim()] = (parts[1] || '').trim();\n      }\n    }\n    return cookies;\n  };\n\n  exports.random32 = function() {\n    var foo, v;\n    foo = crypto.randomBytes(4);\n    v = [foo[0], foo[1], foo[2], foo[3]];\n    return v[0] + (v[1] * 256) + (v[2] * 256 * 256) + (v[3] * 256 * 256 * 256);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/trans-websocket.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var FayeWebsocket, RawWebsocketSessionReceiver, Transport, WebSocketReceiver, transport, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  FayeWebsocket = require('faye-websocket');\n\n  utils = require('./utils');\n\n  transport = require('./transport');\n\n  exports.app = {\n    _websocket_check: function(req, connection, head) {\n      if (!FayeWebsocket.isWebSocket(req)) {\n        throw {\n          status: 400,\n          message: 'Not a valid websocket request'\n        };\n      }\n    },\n    sockjs_websocket: function(req, connection, head) {\n      var ws;\n      this._websocket_check(req, connection, head);\n      ws = new FayeWebsocket(req, connection, head, null, this.options.faye_server_options);\n      ws.onopen = (function(_this) {\n        return function() {\n          return transport.registerNoSession(req, _this, new WebSocketReceiver(ws, connection));\n        };\n      })(this);\n      return true;\n    },\n    raw_websocket: function(req, connection, head) {\n      var ver, ws;\n      this._websocket_check(req, connection, head);\n      ver = req.headers['sec-websocket-version'] || '';\n      if (['8', '13'].indexOf(ver) === -1) {\n        throw {\n          status: 400,\n          message: 'Only supported WebSocket protocol is RFC 6455.'\n        };\n      }\n      ws = new FayeWebsocket(req, connection, head, null, this.options.faye_server_options);\n      ws.onopen = (function(_this) {\n        return function() {\n          return new RawWebsocketSessionReceiver(req, connection, _this, ws);\n        };\n      })(this);\n      return true;\n    }\n  };\n\n  WebSocketReceiver = (function(superClass) {\n    extend(WebSocketReceiver, superClass);\n\n    WebSocketReceiver.prototype.protocol = \"websocket\";\n\n    function WebSocketReceiver(ws1, connection1) {\n      var x;\n      this.ws = ws1;\n      this.connection = connection1;\n      try {\n        this.connection.setKeepAlive(true, 5000);\n        this.connection.setNoDelay(true);\n      } catch (error) {\n        x = error;\n      }\n      this.ws.addEventListener('message', (function(_this) {\n        return function(m) {\n          return _this.didMessage(m.data);\n        };\n      })(this));\n      this.heartbeat_cb = (function(_this) {\n        return function() {\n          return _this.heartbeat_timeout();\n        };\n      })(this);\n      WebSocketReceiver.__super__.constructor.call(this, this.connection);\n    }\n\n    WebSocketReceiver.prototype.setUp = function() {\n      WebSocketReceiver.__super__.setUp.apply(this, arguments);\n      return this.ws.addEventListener('close', this.thingy_end_cb);\n    };\n\n    WebSocketReceiver.prototype.tearDown = function() {\n      this.ws.removeEventListener('close', this.thingy_end_cb);\n      return WebSocketReceiver.__super__.tearDown.apply(this, arguments);\n    };\n\n    WebSocketReceiver.prototype.didMessage = function(payload) {\n      var i, len, message, msg, results, x;\n      if (this.ws && this.session && payload.length > 0) {\n        try {\n          message = JSON.parse(payload);\n        } catch (error) {\n          x = error;\n          return this.didClose(3000, 'Broken framing.');\n        }\n        if (payload[0] === '[') {\n          results = [];\n          for (i = 0, len = message.length; i < len; i++) {\n            msg = message[i];\n            results.push(this.session.didMessage(msg));\n          }\n          return results;\n        } else {\n          return this.session.didMessage(message);\n        }\n      }\n    };\n\n    WebSocketReceiver.prototype.doSendFrame = function(payload) {\n      var x;\n      if (this.ws) {\n        try {\n          this.ws.send(payload);\n          return true;\n        } catch (error) {\n          x = error;\n        }\n      }\n      return false;\n    };\n\n    WebSocketReceiver.prototype.didClose = function(status, reason) {\n      var x;\n      if (status == null) {\n        status = 1000;\n      }\n      if (reason == null) {\n        reason = \"Normal closure\";\n      }\n      WebSocketReceiver.__super__.didClose.apply(this, arguments);\n      try {\n        this.ws.close(status, reason, false);\n      } catch (error) {\n        x = error;\n      }\n      this.ws = null;\n      return this.connection = null;\n    };\n\n    WebSocketReceiver.prototype.heartbeat = function() {\n      var hto_ref, supportsHeartbeats;\n      supportsHeartbeats = this.ws.ping(null, function() {\n        return clearTimeout(hto_ref);\n      });\n      if (supportsHeartbeats) {\n        return hto_ref = setTimeout(this.heartbeat_cb, 10000);\n      } else {\n        return WebSocketReceiver.__super__.heartbeat.apply(this, arguments);\n      }\n    };\n\n    WebSocketReceiver.prototype.heartbeat_timeout = function() {\n      if (this.session != null) {\n        return this.session.close(3000, 'No response from heartbeat');\n      }\n    };\n\n    return WebSocketReceiver;\n\n  })(transport.GenericReceiver);\n\n  Transport = transport.Transport;\n\n  RawWebsocketSessionReceiver = (function(superClass) {\n    extend(RawWebsocketSessionReceiver, superClass);\n\n    function RawWebsocketSessionReceiver(req, conn, server, ws1) {\n      this.ws = ws1;\n      this.prefix = server.options.prefix;\n      this.readyState = Transport.OPEN;\n      this.recv = {\n        connection: conn,\n        protocol: \"websocket-raw\"\n      };\n      this.connection = new transport.SockJSConnection(this);\n      this.decorateConnection(req);\n      server.emit('connection', this.connection);\n      this._end_cb = (function(_this) {\n        return function() {\n          return _this.didClose();\n        };\n      })(this);\n      this.ws.addEventListener('close', this._end_cb);\n      this._message_cb = (function(_this) {\n        return function(m) {\n          return _this.didMessage(m);\n        };\n      })(this);\n      this.ws.addEventListener('message', this._message_cb);\n    }\n\n    RawWebsocketSessionReceiver.prototype.didMessage = function(m) {\n      if (this.readyState === Transport.OPEN) {\n        this.connection.emit('data', m.data);\n      }\n    };\n\n    RawWebsocketSessionReceiver.prototype.send = function(payload) {\n      if (this.readyState !== Transport.OPEN) {\n        return false;\n      }\n      this.ws.send(payload);\n      return true;\n    };\n\n    RawWebsocketSessionReceiver.prototype.close = function(status, reason) {\n      if (status == null) {\n        status = 1000;\n      }\n      if (reason == null) {\n        reason = \"Normal closure\";\n      }\n      if (this.readyState !== Transport.OPEN) {\n        return false;\n      }\n      this.readyState = Transport.CLOSING;\n      this.ws.close(status, reason, false);\n      return true;\n    };\n\n    RawWebsocketSessionReceiver.prototype.didClose = function() {\n      var x;\n      if (!this.ws) {\n        return;\n      }\n      this.ws.removeEventListener('message', this._message_cb);\n      this.ws.removeEventListener('close', this._end_cb);\n      try {\n        this.ws.close(1000, \"Normal closure\", false);\n      } catch (error) {\n        x = error;\n      }\n      this.ws = null;\n      this.readyState = Transport.CLOSED;\n      this.connection.emit('end');\n      this.connection.emit('close');\n      return this.connection = null;\n    };\n\n    return RawWebsocketSessionReceiver;\n\n  })(transport.Session);\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/transport.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var GenericReceiver, MAP, ResponseReceiver, Session, SockJSConnection, Transport, closeFrame, register, stream, utils, uuid,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  stream = require('stream');\n\n  uuid = require('uuid');\n\n  utils = require('./utils');\n\n  Transport = (function() {\n    function Transport() {}\n\n    return Transport;\n\n  })();\n\n  Transport.CONNECTING = 0;\n\n  Transport.OPEN = 1;\n\n  Transport.CLOSING = 2;\n\n  Transport.CLOSED = 3;\n\n  closeFrame = function(status, reason) {\n    return 'c' + JSON.stringify([status, reason]);\n  };\n\n  SockJSConnection = (function(superClass) {\n    extend(SockJSConnection, superClass);\n\n    function SockJSConnection(_session) {\n      this._session = _session;\n      this.id = uuid.v4();\n      this.headers = {};\n      this.prefix = this._session.prefix;\n    }\n\n    SockJSConnection.prototype.toString = function() {\n      return '<SockJSConnection ' + this.id + '>';\n    };\n\n    SockJSConnection.prototype.write = function(string) {\n      return this._session.send('' + string);\n    };\n\n    SockJSConnection.prototype.end = function(string) {\n      if (string) {\n        this.write(string);\n      }\n      this.close();\n      return null;\n    };\n\n    SockJSConnection.prototype.close = function(code, reason) {\n      return this._session.close(code, reason);\n    };\n\n    SockJSConnection.prototype.destroy = function() {\n      this.end();\n      return this.removeAllListeners();\n    };\n\n    SockJSConnection.prototype.destroySoon = function() {\n      return this.destroy();\n    };\n\n    return SockJSConnection;\n\n  })(stream.Stream);\n\n  SockJSConnection.prototype.__defineGetter__('readable', function() {\n    return this._session.readyState === Transport.OPEN;\n  });\n\n  SockJSConnection.prototype.__defineGetter__('writable', function() {\n    return this._session.readyState === Transport.OPEN;\n  });\n\n  SockJSConnection.prototype.__defineGetter__('readyState', function() {\n    return this._session.readyState;\n  });\n\n  MAP = {};\n\n  Session = (function() {\n    function Session(session_id1, server) {\n      this.session_id = session_id1;\n      this.heartbeat_delay = server.options.heartbeat_delay;\n      this.disconnect_delay = server.options.disconnect_delay;\n      this.prefix = server.options.prefix;\n      this.send_buffer = [];\n      this.is_closing = false;\n      this.readyState = Transport.CONNECTING;\n      if (this.session_id) {\n        MAP[this.session_id] = this;\n      }\n      this.timeout_cb = (function(_this) {\n        return function() {\n          return _this.didTimeout();\n        };\n      })(this);\n      this.to_tref = setTimeout(this.timeout_cb, this.disconnect_delay);\n      this.connection = new SockJSConnection(this);\n      this.emit_open = (function(_this) {\n        return function() {\n          _this.emit_open = null;\n          return server.emit('connection', _this.connection);\n        };\n      })(this);\n    }\n\n    Session.prototype.register = function(req, recv) {\n      if (this.recv) {\n        recv.doSendFrame(closeFrame(2010, \"Another connection still open\"));\n        recv.didClose();\n        return;\n      }\n      if (this.to_tref) {\n        clearTimeout(this.to_tref);\n        this.to_tref = null;\n      }\n      if (this.readyState === Transport.CLOSING) {\n        this.flushToRecv(recv);\n        recv.doSendFrame(this.close_frame);\n        recv.didClose();\n        this.to_tref = setTimeout(this.timeout_cb, this.disconnect_delay);\n        return;\n      }\n      this.recv = recv;\n      this.recv.session = this;\n      this.decorateConnection(req);\n      if (this.readyState === Transport.CONNECTING) {\n        this.recv.doSendFrame('o');\n        this.readyState = Transport.OPEN;\n        process.nextTick(this.emit_open);\n      }\n      if (!this.recv) {\n        return;\n      }\n      this.tryFlush();\n    };\n\n    Session.prototype.decorateConnection = function(req) {\n      var address, headers, i, key, len, ref, remoteAddress, remotePort, socket, x;\n      if (!(socket = this.recv.connection)) {\n        socket = this.recv.response.connection;\n      }\n      try {\n        remoteAddress = socket.remoteAddress;\n        remotePort = socket.remotePort;\n        address = socket.address();\n      } catch (error) {\n        x = error;\n      }\n      if (remoteAddress) {\n        this.connection.remoteAddress = remoteAddress;\n        this.connection.remotePort = remotePort;\n        this.connection.address = address;\n      }\n      this.connection.url = req.url;\n      this.connection.pathname = req.pathname;\n      this.connection.protocol = this.recv.protocol;\n      headers = {};\n      ref = ['referer', 'x-client-ip', 'x-forwarded-for', 'x-cluster-client-ip', 'via', 'x-real-ip', 'x-forwarded-proto', 'x-ssl', 'host', 'user-agent', 'accept-language'];\n      for (i = 0, len = ref.length; i < len; i++) {\n        key = ref[i];\n        if (req.headers[key]) {\n          headers[key] = req.headers[key];\n        }\n      }\n      if (headers) {\n        return this.connection.headers = headers;\n      }\n    };\n\n    Session.prototype.unregister = function() {\n      var delay;\n      delay = this.recv.delay_disconnect;\n      this.recv.session = null;\n      this.recv = null;\n      if (this.to_tref) {\n        clearTimeout(this.to_tref);\n      }\n      if (delay) {\n        return this.to_tref = setTimeout(this.timeout_cb, this.disconnect_delay);\n      } else {\n        return this.timeout_cb();\n      }\n    };\n\n    Session.prototype.flushToRecv = function(recv) {\n      var ref, sb;\n      if (this.send_buffer.length > 0) {\n        ref = [this.send_buffer, []], sb = ref[0], this.send_buffer = ref[1];\n        recv.doSendBulk(sb);\n        return true;\n      }\n      return false;\n    };\n\n    Session.prototype.tryFlush = function() {\n      var x;\n      if (!this.flushToRecv(this.recv) || !this.to_tref) {\n        if (this.to_tref) {\n          clearTimeout(this.to_tref);\n        }\n        x = (function(_this) {\n          return function() {\n            if (_this.recv) {\n              _this.to_tref = setTimeout(x, _this.heartbeat_delay);\n              return _this.recv.heartbeat();\n            }\n          };\n        })(this);\n        this.to_tref = setTimeout(x, this.heartbeat_delay);\n      }\n    };\n\n    Session.prototype.didTimeout = function() {\n      if (this.to_tref) {\n        clearTimeout(this.to_tref);\n        this.to_tref = null;\n      }\n      if (this.readyState !== Transport.CONNECTING && this.readyState !== Transport.OPEN && this.readyState !== Transport.CLOSING) {\n        throw Error('INVALID_STATE_ERR');\n      }\n      if (this.recv) {\n        throw Error('RECV_STILL_THERE');\n      }\n      this.readyState = Transport.CLOSED;\n      this.connection.emit('end');\n      this.connection.emit('close');\n      this.connection = null;\n      if (this.session_id) {\n        delete MAP[this.session_id];\n        return this.session_id = null;\n      }\n    };\n\n    Session.prototype.didMessage = function(payload) {\n      if (this.readyState === Transport.OPEN) {\n        this.connection.emit('data', payload);\n      }\n    };\n\n    Session.prototype.send = function(payload) {\n      if (this.readyState !== Transport.OPEN) {\n        return false;\n      }\n      this.send_buffer.push('' + payload);\n      if (this.recv) {\n        this.tryFlush();\n      }\n      return true;\n    };\n\n    Session.prototype.close = function(status, reason) {\n      if (status == null) {\n        status = 1000;\n      }\n      if (reason == null) {\n        reason = \"Normal closure\";\n      }\n      if (this.readyState !== Transport.OPEN) {\n        return false;\n      }\n      this.readyState = Transport.CLOSING;\n      this.close_frame = closeFrame(status, reason);\n      if (this.recv) {\n        this.recv.doSendFrame(this.close_frame);\n        if (this.recv) {\n          this.recv.didClose();\n        }\n        if (this.recv) {\n          this.unregister();\n        }\n      }\n      return true;\n    };\n\n    return Session;\n\n  })();\n\n  Session.bySessionId = function(session_id) {\n    if (!session_id) {\n      return null;\n    }\n    return MAP[session_id] || null;\n  };\n\n  register = function(req, server, session_id, receiver) {\n    var session;\n    session = Session.bySessionId(session_id);\n    if (!session) {\n      session = new Session(session_id, server);\n    }\n    session.register(req, receiver);\n    return session;\n  };\n\n  exports.register = function(req, server, receiver) {\n    return register(req, server, req.session, receiver);\n  };\n\n  exports.registerNoSession = function(req, server, receiver) {\n    return register(req, server, void 0, receiver);\n  };\n\n  GenericReceiver = (function() {\n    function GenericReceiver(thingy) {\n      this.thingy = thingy;\n      this.setUp(this.thingy);\n    }\n\n    GenericReceiver.prototype.setUp = function() {\n      this.thingy_end_cb = (function(_this) {\n        return function() {\n          return _this.didAbort();\n        };\n      })(this);\n      this.thingy.addListener('close', this.thingy_end_cb);\n      return this.thingy.addListener('end', this.thingy_end_cb);\n    };\n\n    GenericReceiver.prototype.tearDown = function() {\n      this.thingy.removeListener('close', this.thingy_end_cb);\n      this.thingy.removeListener('end', this.thingy_end_cb);\n      return this.thingy_end_cb = null;\n    };\n\n    GenericReceiver.prototype.didAbort = function() {\n      this.delay_disconnect = false;\n      return this.didClose();\n    };\n\n    GenericReceiver.prototype.didClose = function() {\n      if (this.thingy) {\n        this.tearDown(this.thingy);\n        this.thingy = null;\n      }\n      if (this.session) {\n        return this.session.unregister();\n      }\n    };\n\n    GenericReceiver.prototype.doSendBulk = function(messages) {\n      var m, q_msgs;\n      q_msgs = (function() {\n        var i, len, results;\n        results = [];\n        for (i = 0, len = messages.length; i < len; i++) {\n          m = messages[i];\n          results.push(utils.quote(m));\n        }\n        return results;\n      })();\n      return this.doSendFrame('a' + '[' + q_msgs.join(',') + ']');\n    };\n\n    GenericReceiver.prototype.heartbeat = function() {\n      return this.doSendFrame('h');\n    };\n\n    return GenericReceiver;\n\n  })();\n\n  ResponseReceiver = (function(superClass) {\n    extend(ResponseReceiver, superClass);\n\n    ResponseReceiver.prototype.max_response_size = void 0;\n\n    ResponseReceiver.prototype.delay_disconnect = true;\n\n    function ResponseReceiver(request, response, options) {\n      var x;\n      this.request = request;\n      this.response = response;\n      this.options = options;\n      this.curr_response_size = 0;\n      try {\n        this.request.connection.setKeepAlive(true, 5000);\n      } catch (error) {\n        x = error;\n      }\n      ResponseReceiver.__super__.constructor.call(this, this.request.connection);\n      if (this.max_response_size === void 0) {\n        this.max_response_size = this.options.response_limit;\n      }\n    }\n\n    ResponseReceiver.prototype.doSendFrame = function(payload) {\n      var r, x;\n      this.curr_response_size += payload.length;\n      r = false;\n      try {\n        this.response.write(payload);\n        r = true;\n      } catch (error) {\n        x = error;\n      }\n      if (this.max_response_size && this.curr_response_size >= this.max_response_size) {\n        this.didClose();\n      }\n      return r;\n    };\n\n    ResponseReceiver.prototype.didClose = function() {\n      var x;\n      ResponseReceiver.__super__.didClose.apply(this, arguments);\n      try {\n        this.response.end();\n      } catch (error) {\n        x = error;\n      }\n      return this.response = null;\n    };\n\n    return ResponseReceiver;\n\n  })(GenericReceiver);\n\n  exports.GenericReceiver = GenericReceiver;\n\n  exports.Transport = Transport;\n\n  exports.Session = Session;\n\n  exports.ResponseReceiver = ResponseReceiver;\n\n  exports.SockJSConnection = SockJSConnection;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/trans-jsonp.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var JsonpReceiver, transport,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  transport = require('./transport');\n\n  JsonpReceiver = (function(superClass) {\n    extend(JsonpReceiver, superClass);\n\n    JsonpReceiver.prototype.protocol = \"jsonp-polling\";\n\n    JsonpReceiver.prototype.max_response_size = 1;\n\n    function JsonpReceiver(req, res, options, callback1) {\n      this.callback = callback1;\n      JsonpReceiver.__super__.constructor.call(this, req, res, options);\n    }\n\n    JsonpReceiver.prototype.doSendFrame = function(payload) {\n      return JsonpReceiver.__super__.doSendFrame.call(this, \"/**/\" + this.callback + \"(\" + JSON.stringify(payload) + \");\\r\\n\");\n    };\n\n    return JsonpReceiver;\n\n  })(transport.ResponseReceiver);\n\n  exports.app = {\n    jsonp: function(req, res, _, next_filter) {\n      var callback;\n      if (!('c' in req.query || 'callback' in req.query)) {\n        throw {\n          status: 500,\n          message: '\"callback\" parameter required'\n        };\n      }\n      callback = 'c' in req.query ? req.query['c'] : req.query['callback'];\n      if (/[^a-zA-Z0-9-_.]/.test(callback) || callback.length > 32) {\n        throw {\n          status: 500,\n          message: 'invalid \"callback\" parameter'\n        };\n      }\n      res.setHeader('X-Content-Type-Options', 'nosniff');\n      res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');\n      res.writeHead(200);\n      transport.register(req, this, new JsonpReceiver(req, res, this.options, callback));\n      return true;\n    },\n    jsonp_send: function(req, res, query) {\n      var d, i, jsonp, len, message, x;\n      if (!query) {\n        throw {\n          status: 500,\n          message: 'Payload expected.'\n        };\n      }\n      if (typeof query === 'string') {\n        try {\n          d = JSON.parse(query);\n        } catch (error) {\n          x = error;\n          throw {\n            status: 500,\n            message: 'Broken JSON encoding.'\n          };\n        }\n      } else {\n        d = query.d;\n      }\n      if (typeof d === 'string' && d) {\n        try {\n          d = JSON.parse(d);\n        } catch (error) {\n          x = error;\n          throw {\n            status: 500,\n            message: 'Broken JSON encoding.'\n          };\n        }\n      }\n      if (!d || d.__proto__.constructor !== Array) {\n        throw {\n          status: 500,\n          message: 'Payload expected.'\n        };\n      }\n      jsonp = transport.Session.bySessionId(req.session);\n      if (jsonp === null) {\n        throw {\n          status: 404\n        };\n      }\n      for (i = 0, len = d.length; i < len; i++) {\n        message = d[i];\n        jsonp.didMessage(message);\n      }\n      res.setHeader('Content-Length', '2');\n      res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n      res.writeHead(200);\n      res.end('ok');\n      return true;\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/trans-xhr.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var XhrPollingReceiver, XhrStreamingReceiver, transport, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  transport = require('./transport');\n\n  utils = require('./utils');\n\n  XhrStreamingReceiver = (function(superClass) {\n    extend(XhrStreamingReceiver, superClass);\n\n    function XhrStreamingReceiver() {\n      return XhrStreamingReceiver.__super__.constructor.apply(this, arguments);\n    }\n\n    XhrStreamingReceiver.prototype.protocol = \"xhr-streaming\";\n\n    XhrStreamingReceiver.prototype.doSendFrame = function(payload) {\n      return XhrStreamingReceiver.__super__.doSendFrame.call(this, payload + '\\n');\n    };\n\n    return XhrStreamingReceiver;\n\n  })(transport.ResponseReceiver);\n\n  XhrPollingReceiver = (function(superClass) {\n    extend(XhrPollingReceiver, superClass);\n\n    function XhrPollingReceiver() {\n      return XhrPollingReceiver.__super__.constructor.apply(this, arguments);\n    }\n\n    XhrPollingReceiver.prototype.protocol = \"xhr-polling\";\n\n    XhrPollingReceiver.prototype.max_response_size = 1;\n\n    return XhrPollingReceiver;\n\n  })(XhrStreamingReceiver);\n\n  exports.app = {\n    xhr_options: function(req, res) {\n      res.statusCode = 204;\n      res.setHeader('Access-Control-Allow-Methods', 'OPTIONS, POST');\n      res.setHeader('Access-Control-Max-Age', res.cache_for);\n      return '';\n    },\n    xhr_send: function(req, res, data) {\n      var d, i, jsonp, len, message, x;\n      if (!data) {\n        throw {\n          status: 500,\n          message: 'Payload expected.'\n        };\n      }\n      try {\n        d = JSON.parse(data);\n      } catch (error) {\n        x = error;\n        throw {\n          status: 500,\n          message: 'Broken JSON encoding.'\n        };\n      }\n      if (!d || d.__proto__.constructor !== Array) {\n        throw {\n          status: 500,\n          message: 'Payload expected.'\n        };\n      }\n      jsonp = transport.Session.bySessionId(req.session);\n      if (!jsonp) {\n        throw {\n          status: 404\n        };\n      }\n      for (i = 0, len = d.length; i < len; i++) {\n        message = d[i];\n        jsonp.didMessage(message);\n      }\n      res.setHeader('Content-Type', 'text/plain; charset=UTF-8');\n      res.writeHead(204);\n      res.end();\n      return true;\n    },\n    xhr_cors: function(req, res, content) {\n      var headers, origin;\n      if (!req.headers['origin']) {\n        origin = '*';\n      } else {\n        origin = req.headers['origin'];\n        res.setHeader('Access-Control-Allow-Credentials', 'true');\n      }\n      res.setHeader('Access-Control-Allow-Origin', origin);\n      res.setHeader('Vary', 'Origin');\n      headers = req.headers['access-control-request-headers'];\n      if (headers) {\n        res.setHeader('Access-Control-Allow-Headers', headers);\n      }\n      return content;\n    },\n    xhr_poll: function(req, res, _, next_filter) {\n      res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');\n      res.writeHead(200);\n      transport.register(req, this, new XhrPollingReceiver(req, res, this.options));\n      return true;\n    },\n    xhr_streaming: function(req, res, _, next_filter) {\n      res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');\n      res.writeHead(200);\n      res.write(Array(2049).join('h') + '\\n');\n      transport.register(req, this, new XhrStreamingReceiver(req, res, this.options));\n      return true;\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/iframe.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var iframe_template, utils;\n\n  utils = require('./utils');\n\n  iframe_template = \"<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" />\\n  <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\\n  <script src=\\\"{{ sockjs_url }}\\\"></script>\\n  <script>\\n    document.domain = document.domain;\\n    SockJS.bootstrap_iframe();\\n  </script>\\n</head>\\n<body>\\n  <h2>Don't panic!</h2>\\n  <p>This is a SockJS hidden iframe. It's used for cross domain magic.</p>\\n</body>\\n</html>\";\n\n  exports.app = {\n    iframe: function(req, res) {\n      var content, context, k, quoted_md5;\n      context = {\n        '{{ sockjs_url }}': this.options.sockjs_url\n      };\n      content = iframe_template;\n      for (k in context) {\n        content = content.replace(k, context[k]);\n      }\n      quoted_md5 = '\"' + utils.md5_hex(content) + '\"';\n      if ('if-none-match' in req.headers && req.headers['if-none-match'] === quoted_md5) {\n        res.statusCode = 304;\n        return '';\n      }\n      res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n      res.setHeader('ETag', quoted_md5);\n      return content;\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/trans-eventsource.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var EventSourceReceiver, transport, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  utils = require('./utils');\n\n  transport = require('./transport');\n\n  EventSourceReceiver = (function(superClass) {\n    extend(EventSourceReceiver, superClass);\n\n    function EventSourceReceiver() {\n      return EventSourceReceiver.__super__.constructor.apply(this, arguments);\n    }\n\n    EventSourceReceiver.prototype.protocol = \"eventsource\";\n\n    EventSourceReceiver.prototype.doSendFrame = function(payload) {\n      var data;\n      data = ['data: ', utils.escape_selected(payload, '\\r\\n\\x00'), '\\r\\n\\r\\n'];\n      return EventSourceReceiver.__super__.doSendFrame.call(this, data.join(''));\n    };\n\n    return EventSourceReceiver;\n\n  })(transport.ResponseReceiver);\n\n  exports.app = {\n    eventsource: function(req, res) {\n      var headers, origin;\n      if (!req.headers['origin'] || req.headers['origin'] === 'null') {\n        origin = '*';\n      } else {\n        origin = req.headers['origin'];\n        res.setHeader('Access-Control-Allow-Credentials', 'true');\n      }\n      res.setHeader('Content-Type', 'text/event-stream');\n      res.setHeader('Access-Control-Allow-Origin', origin);\n      res.setHeader('Vary', 'Origin');\n      headers = req.headers['access-control-request-headers'];\n      if (headers) {\n        res.setHeader('Access-Control-Allow-Headers', headers);\n      }\n      res.writeHead(200);\n      res.write('\\r\\n');\n      transport.register(req, this, new EventSourceReceiver(req, res, this.options));\n      return true;\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/trans-htmlfile.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var HtmlFileReceiver, iframe_template, transport, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  utils = require('./utils');\n\n  transport = require('./transport');\n\n  iframe_template = \"<!doctype html>\\n<html><head>\\n  <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\" />\\n  <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\\n</head><body><h2>Don't panic!</h2>\\n  <script>\\n    document.domain = document.domain;\\n    var c = parent.{{ callback }};\\n    c.start();\\n    function p(d) {c.message(d);};\\n    window.onload = function() {c.stop();};\\n  </script>\";\n\n  iframe_template += Array(1024 - iframe_template.length + 14).join(' ');\n\n  iframe_template += '\\r\\n\\r\\n';\n\n  HtmlFileReceiver = (function(superClass) {\n    extend(HtmlFileReceiver, superClass);\n\n    function HtmlFileReceiver() {\n      return HtmlFileReceiver.__super__.constructor.apply(this, arguments);\n    }\n\n    HtmlFileReceiver.prototype.protocol = \"htmlfile\";\n\n    HtmlFileReceiver.prototype.doSendFrame = function(payload) {\n      return HtmlFileReceiver.__super__.doSendFrame.call(this, '<script>\\np(' + JSON.stringify(payload) + ');\\n</script>\\r\\n');\n    };\n\n    return HtmlFileReceiver;\n\n  })(transport.ResponseReceiver);\n\n  exports.app = {\n    htmlfile: function(req, res) {\n      var callback;\n      if (!('c' in req.query || 'callback' in req.query)) {\n        throw {\n          status: 500,\n          message: '\"callback\" parameter required'\n        };\n      }\n      callback = 'c' in req.query ? req.query['c'] : req.query['callback'];\n      if (/[^a-zA-Z0-9-_.]/.test(callback)) {\n        throw {\n          status: 500,\n          message: 'invalid \"callback\" parameter'\n        };\n      }\n      res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n      res.writeHead(200);\n      res.write(iframe_template.replace(/{{ callback }}/g, callback));\n      transport.register(req, this, new HtmlFileReceiver(req, res, this.options));\n      return true;\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-sockjs/sockjs/lib/chunking-test.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var utils;\n\n  utils = require('./utils');\n\n  exports.app = {\n    chunking_test: function(req, res, _, next_filter) {\n      var write;\n      res.setHeader('Content-Type', 'application/javascript; charset=UTF-8');\n      res.writeHead(200);\n      write = (function(_this) {\n        return function(payload) {\n          var x;\n          try {\n            return res.write(payload + '\\n');\n          } catch (error) {\n            x = error;\n          }\n        };\n      })(this);\n      utils.timeout_chain([\n        [\n          0, (function(_this) {\n            return function() {\n              return write('h');\n            };\n          })(this)\n        ], [\n          1, (function(_this) {\n            return function() {\n              return write(Array(2049).join(' ') + 'h');\n            };\n          })(this)\n        ], [\n          5, (function(_this) {\n            return function() {\n              return write('h');\n            };\n          })(this)\n        ], [\n          25, (function(_this) {\n            return function() {\n              return write('h');\n            };\n          })(this)\n        ], [\n          125, (function(_this) {\n            return function() {\n              return write('h');\n            };\n          })(this)\n        ], [\n          625, (function(_this) {\n            return function() {\n              return write('h');\n            };\n          })(this)\n        ], [\n          3125, (function(_this) {\n            return function() {\n              write('h');\n              return res.end();\n            };\n          })(this)\n        ]\n      ]);\n      return true;\n    },\n    info: function(req, res, _) {\n      var info;\n      info = {\n        websocket: this.options.websocket,\n        origins: ['*:*'],\n        cookie_needed: !!this.options.jsessionid,\n        entropy: utils.random32()\n      };\n      if (typeof this.options.base_url === 'function') {\n        info.base_url = this.options.base_url();\n      } else if (this.options.base_url) {\n        info.base_url = this.options.base_url;\n      }\n      res.setHeader('Content-Type', 'application/json; charset=UTF-8');\n      res.writeHead(200);\n      return res.end(JSON.stringify(info));\n    },\n    info_options: function(req, res) {\n      res.statusCode = 204;\n      res.setHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');\n      res.setHeader('Access-Control-Max-Age', res.cache_for);\n      return '';\n    }\n  };\n\n}).call(this);\n"}